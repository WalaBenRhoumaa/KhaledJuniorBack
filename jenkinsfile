pipeline {
    agent any

    environment {
        GITHUB_PAT = credentials('github-cridentiel')
        DOCKERHUB_USERNAME = "walabr"
        JD_IMAGE = "${DOCKERHUB_USERNAME}/backend-khaled:latest"
    }

    parameters {
        string(name: 'BRANCH_NAME', defaultValue: 'main', description: 'Nom de la branche Git')
        string(name: 'CHANGE_ID', defaultValue: '', description: 'ID de changement Git pour les demandes de fusion')
        string(name: 'CHANGE_TARGET', defaultValue: '', description: 'ID de changement Git pour les demandes de fusion cible')
    }

    stages {
        stage('Set Branch Name') {
            steps {
                script {
                    branchName = params.BRANCH_NAME
                    targetBranch = branchName
                    echo "Nom de la branche actuelle : ${branchName}"
                    echo "Nom de la branche cible : ${targetBranch}"
                }
            }
        }

        stage('Checkout Git repository') {
            steps {
                echo 'Récupération'
                git branch: 'main', credentialsId: 'github-cridentiel', url: 'https://github.com/WalaBenRhoumaa/KhaledJuniorBack'
            }
        }

        stage('Nettoyage du Build'){
            steps{
                sh 'rm -rf node_modules'
            }
        }

        stage('Installer les dépendances'){
            steps{
                nodejs('NodeJS'){
                    sh 'npm install --legacy-peer-deps'
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                echo 'Construction de l\'image Docker...'
                script {
                    def customImage = docker.build("${DOCKERHUB_USERNAME}/backend-khaled:latest", "-f khaled-junior-backend/Dockerfile .")
                    env.IMAGE_ID_BACKEND = customImage.id
                }
            }
        }

        stage('Pousser l\'image Docker') {
            steps {
                echo 'Pousser l\'image Docker vers DockerHub...'
                script {
                    withCredentials([usernamePassword(credentialsId: 'docker-credentials', usernameVariable: 'DOCKER_USERNAME', passwordVariable: 'DOCKER_PASSWORD')]) {
                        sh 'echo $DOCKER_PASSWORD | docker login -u $DOCKER_USERNAME --password-stdin'
                        sh "docker push ${DOCKER_USERNAME}/backend-khaled:latest"
                    }
                }
            }
        }

        stage('Exécuter le conteneur Docker') {
            steps {
                echo "Exécution du conteneur Docker"
                sh "docker run -d -p 6665:6665 --name backend-container ${DOCKERHUB_USERNAME}/backend-khaled:latest"
            }
        }

        stage('Nettoyage Docker') {
            steps {
                echo 'Nettoyage des images Docker inutilisées'
                sh 'docker system prune -af'
            }
        }

        stage('FIN DU PIPELINE') {
            steps {
                echo "Pipeline fermé"
            }
        }
    }

    post {
        success {
            echo 'Build et tests terminés avec succès !'
        }
        failure {
            echo 'Le build ou les tests ont échoué.'
            script {
                archiveArtifacts artifacts: '*/target/.log', allowEmptyArchive: true
            }
        }
    }
}