pipeline {
    agent any
    environment {
        GITHUB_PAT = credentials('github-cridentiel')
        DOCKERHUB_USERNAME = "walabr"
        DEV_TAG = "${DOCKERHUB_USERNAME}/bnabacken:latest-dev"
        STAGING_TAG = "${DOCKERHUB_USERNAME}/bnabacken:latest-staging"
        PROD_TAG = "${DOCKERHUB_USERNAME}/bnabacken:latest-prod"
    }

    parameters {
        string(name: 'BRANCH_NAME', defaultValue: 'main', description: 'Git branch name')
        string(name: 'CHANGE_ID', defaultValue: '', description: 'Git change ID for merge requests')
        string(name: 'CHANGE_TARGET', defaultValue: '', description: 'Git change ID for the target merge requests')
    }

    stages {
        stage('Set Branch Name') {
            steps {
                script {
                    branchName = params.BRANCH_NAME
                    targetBranch = branchName
                    echo "Current branch name: ${branchName}"
                    echo "Target branch name: ${targetBranch}"
                }
            }
        }

        stage('Checkout Git repository') {
            steps {
                echo 'Pulling'
                git branch: 'main', credentialsId: 'github-cridentiel', url: 'https://github.com/WalaBenRhoumaa/KhaledJuniorBack'
            }
        }

        stage('Clean Build'){
            steps{
                sh 'rm -rf node_modules'
            }
        }


        stage('Install dependencies'){
            steps{
                nodejs('nodeJSInstallationName'){
                    sh 'npm install --legacy-peer-deps'
                                        
                }
            }
        }


        // stage('Test') {
        //     steps {
        //         echo 'Running tests...'
        //         dir('khaled-junior-backend-main') {
        //             sh 'npm test'
        //         }
        //     }
        // }

        stage('Build') {
            steps {
                echo 'Building project...'
                
                    sh 'npm run build'
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                echo 'Building Docker image...'
                script {
                    withCredentials([usernamePassword(credentialsId: 'dockeer', usernameVariable: 'DOCKER_USERNAME', passwordVariable: 'DOCKER_PASSWORD')]) {
                        def customImage = docker.build("${DOCKERHUB_USERNAME}/bnabacken:latest", "-f khaled-junior-backend-main/Dockerfile khaled-junior-backend-main")
                        // Store the Docker image ID for subsequent steps
                        env.IMAGE_ID_BACKEND = customImage.id
                    }
                }
            }
        }

        stage('Push Docker Image') {
            steps {
                echo 'Pushing Docker image to DockerHub...'
                script {
                    withCredentials([usernamePassword(credentialsId: 'dockeer', usernameVariable: 'DOCKER_USERNAME', passwordVariable: 'DOCKER_PASSWORD')]) {
                        sh 'echo $DOCKER_PASSWORD | docker login -u $DOCKER_USERNAME --password-stdin'
                        sh "docker push ${DOCKER_USERNAME}/bnabacken:latest"
                    }
                }
            }
        }

        stage('Run Docker Container') {
            steps {
                echo "Running Docker container"
                sh "docker run -d -p 6665:6665 --name backend-container ${DOCKERHUB_USERNAME}/bnabacken:latest"
            }
        }

        stage('Docker Cleanup') {
            steps {
                echo 'Cleaning up unused Docker images'
                sh 'docker system prune -af'
            }
        }

        stage('END OF PIPELINE') {
            steps {
                echo "Pipeline Closed"
            }
        }
    }

    post {
        success {
            echo 'Build and tests completed successfully!'
        }
        failure {
            echo 'Build or tests failed.'
            script {
                // Archive logs or any other relevant information for further inspection
                archiveArtifacts artifacts: '*/target/.log', allowEmptyArchive: true
            }
        }
    }
